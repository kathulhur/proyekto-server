extend type Query {
    login: Token,
    user(id: ID!): User,
    users: [User],
    googleAuthApiKey: String
    appName: String
}

type Mutation {
    createUser(username: String!, password: String!, secretCode: String!, twoFactorAuthQrLink: String!): User
    editUser(id: ID!, username: String, password: String, secretCode: String, twoFactorAuthEnabled: Boolean, role: Role): User
    deleteUser(id: ID!): User
    signIn(username: String!, password: String!): AuthPayload!
    validateTwoFactorAuth(code: String!, secretCode: String!): String
}

type User {
    id: ID!
    username: String
    password: String
    role: Role
    secretCode: String
    twoFactorAuthEnabled: Boolean
    twoFactorAuthQrLink: String
}

enum Role {
    ADMIN,
    USER
}

type AuthPayload {
    token: String!
    user: User!
}


type Token {
    token: String!
}