extend type Query {
    user(id: ID!): User
    users: [User]
    viewer: User
    getLoggedInUser: User
    usersCount: Int
}

type Mutation {
    createUser(username: String!, password: String!): User
    updateUser(id: ID!, username: String, password: String, twoFactorAuthEnabled: Boolean, role: Role): User
    deleteUser(id: ID!): User
    signIn(username: String!, password: String!): SignInResponse!
    validateCode(userId: ID!, code: String!): ValidateCodeResponse!
}

type User {
    id: ID!
    username: String
    password: String
    role: Role
    secretCode: String
    twoFactorAuthEnabled: Boolean
    twoFactorAuthQrLink: String
}

enum Role {
    ADMIN,
    USER
}


type Token {
    token: String!
}


type UserResponse {
    user: User
    code: Int!
    success: Boolean!
    message: String!
}



type SignInResponse implements MutationResponse {
    "Similar to HTTP status code, represents the status of the mutation"
    code: Int!
    "Indicates whether the mutation was successful"
    success: Boolean!
    "Human-readable message for the UI"
    message: String!
    "The token for the user"
    token: String
    "The user"
    user: User
}

type ValidateCodeResponse implements MutationResponse {
    "Similar to HTTP status code, represents the status of the mutation"
    code: Int!
    "Indicates whether the mutation was successful"
    success: Boolean!
    "Human-readable message for the UI"
    message: String!
    "The token for the user"
    token: String
    "The user"
    user: User
}

interface MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
}